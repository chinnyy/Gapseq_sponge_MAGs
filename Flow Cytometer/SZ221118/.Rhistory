# Plotting spatial and temporal changes
par(mfrow=c(2,3))
evalArena(eval,show_legend = FALSE, time=seq(1,12,by=2))
View(Ec_core)
# Create the wild type E.coli
bac1<- Bac(Ec_core,type="ecoli_wt")
# Create auxotrophic mutant which are mutants that cannot grow in minimal medium if certain nutrients are not supplied
ecore_aux<-changeBounds(Ec_core,"Ex_o2(e)",lb=0)
bac2<- Bac(encore_aux,type="ecoli_aux",setExInf= FALSE)
ecore_aux <- changeBounds(Ec_core, "EX_o2(e)",lb=0)
ecore_aux<-changeBounds(Ec_core,"Ex_o2(e)",lb=0)
# Create auxotrophic mutant which are mutants that cannot grow in minimal medium if certain nutrients are not supplied
ecore_aux<-changeBounds(Ec_core,"EX_o2(e)",lb=0)
bac2<- Bac(encore_aux,type="ecoli_aux",setExInf= FALSE)
bac2<- Bac(ecore_aux,type="ecoli_aux",setExInf= FALSE)
arena <- Arena(n=20, m=20)
arena <- addOrg(arena,bac1,amount=5)
arena <- addOrg(arena,bac2,amount=5)
arena <- addSubs(arena, smax=0.5, mediac="EX_glc(e)", unit="mM")
arena <- addSubs(arena, smax=1, mediac=c("EX_pi(e)", "EX_h2o(e)", "EX_o2(e)", "EX_nh4(e)"), unit="mM")
eval <- simEnv(arena,time=10)
par(mfrow=c(1,2))
plotCurves2(eval)
# Create the wild type E.coli
bac1<- Bac(Ec_core,type="ecoli_wt")
# Create auxotrophic mutant which are mutants that cannot grow in minimal medium if certain nutrients are not supplied
ecore_aux<-changeBounds(Ec_core,"EX_o2(e)",lb=0)
bac2<- Bac(ecore_aux,type="ecoli_aux",setExInf= FALSE)
arena <- Arena(n=20, m=20)
arena <- addOrg(arena,bac1,amount=5)
arena <- addOrg(arena,bac2,amount=5)
arena <- addSubs(arena, smax=0.5, mediac="EX_glc(e)", unit="mM")
arena <- addSubs(arena, smax=1, mediac=c("EX_pi(e)", "EX_h2o(e)", "EX_o2(e)", "EX_nh4(e)"), unit="mM")
eval <- simEnv(arena,time=10)
# Plot the 2 organism types next to each other
par(mfrow=c(1,2))
plotCurves2(eval)
# Plotting the spatial pattern of the community when time is at 10
par(mfrow=c(1,4))
evalArena(eval,c("Population","EX_glc(e)","EX_o2(e)","EX_etoh(e)"), time=10)
plotSubDist2(eval, sub = c("EX_etoh(e)"), times = c(1,5,10))
plotSubDist2(eval, sub = c("EX_etoh(e)"))
minePheno(eval)
pmat <- getPhenoMat(eval)
pmat[,which(colSums(pmat)>0)]
minePheno(eval,legend= T)
# Load package
library(parallel)
replicates <- 2 # determine the number of replicates
cores <- ifelse(detectCores()>=2,2,1) #determine the number of CPU cores of this device
cl<- makeCluster(cores,type="PSOCK")
getwd = getwd()
getwd
# Import the gap-filled modified object model (gfM):
gfM_dir = '20220602_medium_Actino_5_Burgsdorf_2021_pos/' # manually change this!
input_dir = paste(getwd,'/07_gf_model/',gfM_dir,sep = '')
input_dir
# setwd
setwd("C:/Users/chiny/Desktop/UNSW/CELL_COUNT/Flow Cytometer/SZ221118")
library(ggplot2) # visualization
cfm_data = read.csv(file= "Flow_cytometer_output_for_R_181122.csv", header = TRUE, sep = ",", dec = ".", fill = TRUE)
View(cfm_data)
cfm_data
cfm_data = read.csv(file= "Flow_cytometer_output_for_R_181122.csv", header = TRUE, sep = ",", dec = ".", fill = TRUE, fileEncoding = 'UTF-8-BOM')
View(cfm_data)
cfm_data = read.csv(file= "Flow_cytometer_output_for_R_181122.csv", header = TRUE, sep = ",", dec = ".", fill = TRUE, fileEncoding = 'UTF-8-BOM')
cfm_long <- gather(cfm_data, stain, cell_count, STY09:DAPI, factor_key=TRUE)
library(tidyr)
cfm_long <- gather(cfm_data, stain, cell_count, STY09:DAPI, factor_key=TRUE)
View(cfm_long)
View(cfm_long)
ggplot(cfm_long,
aes(x = CFU,
y = cell_count,
colour = stain,
fill = stain)) +
geom_boxplot(width = 0.15,
outlier.shape = NA,
alpha = 0.9,
position = position_dodge(0.3)) +
labs(x = "Treatment",
y = "Density of bacteria on the leaf surface") +
theme_light()
ggplot(cfm_long,
aes(x = CFU,
y = cell_count,
colour = stain,
fill = stain)) +
geom_boxplot(alpha = 0.9,
position = position_dodge(0.3)) +
labs(x = "Treatment",
y = "Density of bacteria on the leaf surface") +
theme_light()
ggplot(cfm_long,
aes(x = row,
y = cell_count,
colour = stain,
fill = stain)) +
geom_boxplot(alpha = 0.9,
position = position_dodge(0.3)) +
labs(x = "Treatment",
y = "Density of bacteria on the leaf surface") +
theme_light()
ggplot(cfm_long,
aes(x = as.factor(CFU),
y = cell_count,
colour = stain,
fill = stain)) +
geom_boxplot(alpha = 0.9,
position = position_dodge(0.3)) +
labs(x = "Treatment",
y = "Density of bacteria on the leaf surface") +
theme_light()
ggplot(cfm_long,
aes(x = lg(CFU),
y = cell_count,
colour = stain,
fill = stain)) +
geom_boxplot(alpha = 0.9,
position = position_dodge(0.3)) +
labs(x = "Treatment",
y = "Density of bacteria on the leaf surface") +
theme_light()
ggplot(cfm_long,
aes(x = log(CFU),
y = cell_count,
colour = stain,
fill = stain)) +
geom_boxplot(alpha = 0.9,
position = position_dodge(0.3)) +
labs(x = "Treatment",
y = "Density of bacteria on the leaf surface") +
theme_light()
ggplot(cfm_long,
aes(x = log(CFU),
y = log(cell_count),
colour = stain,
fill = stain)) +
geom_boxplot(alpha = 0.9,
position = position_dodge(0.3)) +
labs(x = "Treatment",
y = "Density of bacteria on the leaf surface") +
theme_light()
avg_data = read.csv(file= "Flow_cytometer_output_for_R__AVG_181122.csv", header = TRUE, sep = ",", dec = ".", fill = TRUE, fileEncoding = 'UTF-8-BOM')
View(avg_data)
avg_long <- gather(avg_data, stain, cell_count, STY09:DAPI, factor_key=TRUE)
View(avg_long)
ggplot (avg_long,
aes(x=CFU,
y=cell_count))+
geom_line(colour=stain)
ggplot (avg_long,
aes(x=CFU,
y=cell_count))+
geom_line(aes(colour=stain))
ggplot(cfm_long,
ggplot(cfm_long,
ggplot(cfm_long,
ggplot(cfm_long,       aes(x = CFU,
ggplot(cfm_long,
aes(x = CFU,
y = cell_count)) +
geom_boxplot(aes(colour=stain),
alpha = 0.9,
position = position_dodge(0.3)) +
labs(x = "Treatment",
y = "Density of bacteria on the leaf surface") +
theme_light()
ggplot(cfm_long,
aes(x = CFU,
y = cell_count)) +
geom_boxplot(aes(colour=stain),
alpha = 0.9,
position = position_dodge(0.3)) +
theme_light()
ggplot(cfm_long,
aes(x = CFU,
y = cell_count)) +
geom_boxplot(aes(colour=stain),
alpha = 0.9,
position = position_dodge(0.3)) +
xlim(min(CFU), max(CFU))+
theme_light()
ggplot(cfm_long,
aes(x = CFU,
y = cell_count)) +
geom_boxplot(aes(colour=stain),
alpha = 0.9,
position = position_dodge(0.3)) +
xlim(min(cfm_long$CFU), max(cfm_long$CFU))+
theme_light()
o
ggplot (avg_long,
aes(x=CFU,
y=cell_count))+
geom_line(aes(colour=stain))+
geom_point(aes(colour=stain))+
theme_light()
ggplot (avg_long,
aes(x=log(CFU),
y=log(cell_count)))+
geom_line(aes(colour=stain))+
geom_point(aes(colour=stain))+
theme_light()
ggplot(cfm_long,
aes(x = log(CFU),
y = log(cell_count))) +
geom_boxplot(aes(colour=stain),
alpha = 0.9,
position = position_dodge(0.3)) +
xlim(min(cfm_long$CFU), max(cfm_long$CFU))+
theme_light()
ggplot(cfm_long,
aes(x = log(CFU),
y = log(cell_count))) +
geom_boxplot(aes(colour=stain),
alpha = 0.9,
position = position_dodge(0.3)) +
# xlim(min(cfm_long$CFU), max(cfm_long$CFU))+
theme_light()
ggplot(cfm_long,
aes(x = log(CFU),
y = log(cell_count))) +
geom_boxplot(aes(colour=stain),
alpha = 0.9,
position = position_dodge(0.3)) +
xlim(min(log(cfm_long$CFU)), max(log(cfm_long$CFU)))+
theme_light()
ggplot(cfm_long,
aes(x = log(CFU),
y = log(cell_count))) +
geom_boxplot(aes(colour=stain),
alpha = 0.9,
position = position_dodge(0.3)) +
# xlim(min(log(cfm_long$CFU)), max(log(cfm_long$CFU)))+
theme_light()
ggplot(cfm_long,
aes(x = log(CFU),
y = log(cell_count))) +
geom_boxplot(aes(colour=stain),
width=0.1
alpha = 0.9,
position = position_dodge(0.3)) +
# xlim(min(log(cfm_long$CFU)), max(log(cfm_long$CFU)))+
theme_light()
ggplot(cfm_long,
aes(x = log(CFU),
y = log(cell_count))) +
geom_boxplot(aes(colour=stain),
width=0.1,
alpha = 0.9,
position = position_dodge(0.3)) +
# xlim(min(log(cfm_long$CFU)), max(log(cfm_long$CFU)))+
theme_light()
ggplot(cfm_long,
aes(x = log(CFU),
y = log(cell_count))) +
geom_boxplot(aes(colour=stain),
width=0.01,
alpha = 0.9,
position = position_dodge(0.3)) +
# xlim(min(log(cfm_long$CFU)), max(log(cfm_long$CFU)))+
theme_light()
ggplot (avg_long,
aes(x=log(CFU),
y=log(cell_count)))+
geom_line(aes(colour=stain))+
geom_point(aes(colour=stain))+
theme_light()
m1_cfm <- lm(cell_count~ CFU + stain, data= cfm_long)
m1_cfm_emm <- as.data.frame(emmeans(m1_cfm~ CFU + stain))
library(dplyr) # data wrangling
library(lme4) # modeling
library(ggplot2) # visualization
library(emmeans) # descriptive stats
m1_cfm_emm <- as.data.frame(emmeans(m1_cfm~ CFU + stain))
m1_cfm_emm <- emmeans(m1_cfm~ CFU + stain)
m1_cfm_emm <- emmeans(m1_cfm,~ CFU + stain)
View(m1_cfm_emm)
ggplot(m1_cfm_emm)+
geom_point(aes(x=CFU,
y=emmean,
colour=stain),
position = position_dodge(width = 0.5),
size = 3) +
geom_errorbar(aes(x = origin,
ymin = lower.CL,
ymax = upper.CL,
color = population),
width = 0.2, size = 1,
position = position_dodge(width=0.5)) +
scale_color_manual(name = "Population",
values = c("#B4DAE5FF",
"#F0D77BFF",
"#AE93BEFF"))+
theme_light()
m1_cfm_emm <- as.data.frame(m1_cfm_emm)
View(m1_cfm_emm)
ggplot(m1_cfm_emm)+
geom_point(aes(x=CFU,
y=emmean,
colour=stain),
position = position_dodge(width = 0.5),
size = 3) +
geom_errorbar(aes(x = origin,
ymin = lower.CL,
ymax = upper.CL,
color = population),
width = 0.2, size = 1,
position = position_dodge(width=0.5)) +
scale_color_manual(name = "Population",
values = c("#B4DAE5FF",
"#F0D77BFF",
"#AE93BEFF"))+
theme_light()
ggplot(m1_cfm_emm)+
geom_point(aes(x=CFU,
y=emmean,
colour=stain),
position = position_dodge(width = 0.5),
size = 3) +
geom_errorbar(aes(x = CFU,
ymin = lower.CL,
ymax = upper.CL,
color = stain),
width = 0.2, size = 1,
position = position_dodge(width=0.5)) +
scale_color_manual(name = "Population",
values = c("#B4DAE5FF",
"#F0D77BFF",
"#AE93BEFF"))+
theme_light()
# setwd
setwd("C:/Users/chiny/Desktop/UNSW/CELL_COUNT/Flow Cytometer/SZ221118")
library(tidyr)
library(dplyr) # data wrangling
library(ggplot2) # visualization
avg_data = read.csv(file= "Flow_cytometer_output_for_R__AVG_181122.csv", header = TRUE, sep = ",", dec = ".", fill = TRUE, fileEncoding = 'UTF-8-BOM')
avg_long <- gather(avg_data, stain, cell_count, STY09:CFU_SZ, factor_key=TRUE)
# Regular version
ggplot (avg_long,
aes(x=CFU,
y=cell_count))+
geom_line(aes(colour=stain))+
geom_point(aes(colour=stain))+
theme_light()
# log version
ggplot (avg_long,
aes(x=log(CFU),
y=log(cell_count)))+
geom_line(aes(colour=stain))+
geom_point(aes(colour=stain))+
theme_light()
avg_data_ss <- avg_data[4:10,]
avg_long_ss <- gather(avg_data_ss, stain, cell_count, STY09:CFU_SZ, factor_key=TRUE)
avg_long_ss$log_CFU <- log(avg_long_ss[,c("CFU")])
avg_long_ss$log_cc <- log(avg_long_ss[,c("cell_count")])
# Plot for the subset of data
ggplot (avg_long_ss,
aes(x=CFU,
y=cell_count))+
geom_line(aes(colour=stain))+
geom_point(aes(colour=stain))+
theme_light()
ggplot (avg_long_ss,
aes(x=log10(CFU),
y=log10(cell_count)))+
geom_line(aes(colour=stain))+
geom_point(aes(colour=stain))+
theme_light()
ggplot (avg_long_ss,
aes(x=log10(CFU),
y=log10(cell_count)))+
geom_line(aes(colour=stain))+
geom_point(aes(colour=stain))+
ylab("Cell Count/mL (Log10)")+
ylab(bquote(Cell Count/mL (Log[10])))+
xlab(bquote(CFU/mL (Log[10])))+
xlab("CFU/mL (Log10)")+
theme_light()
ggplot (avg_long_ss,
aes(x=log10(CFU),
y=log10(cell_count)))+
geom_line(aes(colour=stain))+
geom_point(aes(colour=stain))+
#  ylab("Cell Count/mL (Log10)")+
ylab(bquote(Cell Count/mL (Log[10])))+
xlab(bquote(CFU/mL (Log[10])))+
# xlab("CFU/mL (Log10)")+
theme_light()
ggplot (avg_long_ss,
aes(x=log10(CFU),
y=log10(cell_count)))+
geom_line(aes(colour=stain))+
geom_point(aes(colour=stain))+
#  ylab("Cell Count/mL (Log10)")+
# ylab(bquote(Cell Count/mL (Log[10])))+
#xlab(bquote(CFU/mL (Log[10])))+
# xlab("CFU/mL (Log10)")+
xlab(bquote(X-Axis[subscript]))+
theme_light()
ggplot (avg_long_ss,
aes(x=log10(CFU),
y=log10(cell_count)))+
geom_line(aes(colour=stain))+
geom_point(aes(colour=stain))+
#  ylab("Cell Count/mL (Log10)")+
# ylab(bquote(Cell Count/mL (Log[10])))+
#xlab(bquote(CFU/mL (Log[10])))+
# xlab("CFU/mL (Log10)")+
xlab(bquote(CFU/m[subscript]))+
theme_light()
ggplot (avg_long_ss,
aes(x=log10(CFU),
y=log10(cell_count)))+
geom_line(aes(colour=stain))+
geom_point(aes(colour=stain))+
#  ylab("Cell Count/mL (Log10)")+
# ylab(bquote(Cell Count/mL (Log[10])))+
#xlab(bquote(CFU/mL (Log[10])))+
# xlab("CFU/mL (Log10)")+
xlab(bquote(CFU/mL (Log[10])))+
theme_light()
ggplot (avg_long_ss,
aes(x=log10(CFU),
y=log10(cell_count)))+
geom_line(aes(colour=stain))+
geom_point(aes(colour=stain))+
#  ylab("Cell Count/mL (Log10)")+
# ylab(bquote(Cell Count/mL (Log[10])))+
#xlab(bquote(CFU/mL (Log[10])))+
# xlab("CFU/mL (Log10)")+
ylab(bquote(Y-Axis[subscript]))+
xlab(bquote(CFU/mL (Log[10])))+
theme_light()
ggplot (avg_long_ss,
aes(x=log10(CFU),
y=log10(cell_count)))+
geom_line(aes(colour=stain))+
geom_point(aes(colour=stain))+
#  ylab("Cell Count/mL (Log10)")+
# ylab(bquote(Cell Count/mL (Log[10])))+
#xlab(bquote(CFU/mL (Log[10])))+
# xlab("CFU/mL (Log10)")+
ylab(bquote(Cell Count/mL [subscript]))+
xlab(bquote(CFU/mL (Log[10])))+
theme_light()
ggplot (avg_long_ss,
aes(x=log10(CFU),
y=log10(cell_count)))+
geom_line(aes(colour=stain))+
geom_point(aes(colour=stain))+
#  ylab("Cell Count/mL (Log10)")+
# ylab(bquote(Cell Count/mL (Log[10])))+
#xlab(bquote(CFU/mL (Log[10])))+
# xlab("CFU/mL (Log10)")+
ylab(bquote(Cell Count/mL [subscript]))+
xlab(bquote(CFU/mL (Log[10])))+
theme_light()
ggplot (avg_long_ss,
aes(x=log10(CFU),
y=log10(cell_count)))+
geom_line(aes(colour=stain))+
geom_point(aes(colour=stain))+
#  ylab("Cell Count/mL (Log10)")+
# ylab(bquote(Cell Count/mL (Log[10])))+
#xlab(bquote(CFU/mL (Log[10])))+
# xlab("CFU/mL (Log10)")+
ylab(bquote(Cell Cont/mL [subscript]))+
xlab(bquote(CFU/mL (Log[10])))+
theme_light()
ggplot (avg_long_ss,
aes(x=log10(CFU),
y=log10(cell_count)))+
geom_line(aes(colour=stain))+
geom_point(aes(colour=stain))+
#  ylab("Cell Count/mL (Log10)")+
# ylab(bquote(Cell Count/mL (Log[10])))+
#xlab(bquote(CFU/mL (Log[10])))+
# xlab("CFU/mL (Log10)")+
ylab(bquote(Cell~Count/mL [subscript]))+
xlab(bquote(CFU/mL (Log[10])))+
# labs(y=expression(Cell Count/mL (Log[10])))+
theme_light()
ggplot (avg_long_ss,
aes(x=log10(CFU),
y=log10(cell_count)))+
geom_line(aes(colour=stain))+
geom_point(aes(colour=stain))+
#  ylab("Cell Count/mL (Log10)")+
# ylab(bquote(Cell Count/mL (Log[10])))+
#xlab(bquote(CFU/mL (Log[10])))+
# xlab("CFU/mL (Log10)")+
ylab(bquote(Cell~Count/mL (Log[10])))+
xlab(bquote(CFU/mL (Log[10])))+
# labs(y=expression(Cell Count/mL (Log[10])))+
theme_light()
# log version
ggplot (avg_long,
aes(x=log10(CFU),
y=log10(cell_count)))+
geom_line(aes(colour=stain))+
geom_point(aes(colour=stain))+
ylab(bquote(Cell~Count/mL (Log[10])))+
xlab(bquote(CFU/mL (Log[10])))+
theme_light()
View(avg_long_ss)
avg_data_ss <- avg_data[4:10,]
avg_long_ss <- gather(avg_data_ss, stain, cell_count, STY09:CFU_SZ, factor_key=TRUE)
avg_long_ss$log_CFU <- log10(avg_long_ss[,c("CFU")])
avg_long_ss$log_cc <- log10(avg_long_ss[,c("cell_count")])
View(avg_long_ss)
